@page "/"
@using System.Text.Json;

<h1>Mediator Demo</h1>

<button class="btn btn-primary" @onclick="RunPassing">Run Passing request</button>
<button class="btn btn-primary" @onclick="RunFailing">Run Failing request</button>
<button class="btn btn-primary" @onclick="()=>RunMessage(true)">Run Passing message</button>
<button class="btn btn-primary" @onclick="()=>RunMessage(false)">Run Failing message</button>
@if (!string.IsNullOrWhiteSpace(_serializedReponse.Value) || !string.IsNullOrWhiteSpace(_serializedData.Value))
{
    <h4>Response</h4>
    <div>@_serializedReponse</div>
    <h4>Data transfered from server</h4>
    <div>@_serializedData</div>
}

@code{
    private MarkupString _serializedReponse;
    private MarkupString _serializedData;
    private readonly JsonSerializerOptions _serializerOptions = new JsonSerializerOptions
    {
        WriteIndented = true
    };
    private async Task RunPassing()
    {
        var response = await Mediator.Execute(new WeatherForecast.Request());
        ProcessResponse(response);
    }

    private async Task RunFailing()
    {
        var response = await Mediator.Execute(new Failing.Request());
        ProcessResponse(response);
    }

    private async Task RunMessage(bool pass)
    {
        var response = await Mediator.Dispatch(new DemoMessage() { Fail = !pass });
        var converted = (IMediatorResponse<object>)response;
        _serializedReponse = Serialize(new
        {
            Success = response.Success,
            ErrorMessage = response.ErrorMessage
        });
        _serializedData = Serialize(new
        {
            Results = converted.Results,
            ErrorMessages = converted.ErrorMessages
        });
    }

    private void ProcessResponse<TResult>(IMediatorResponse<TResult> response)
    {
        _serializedReponse = Serialize(new
        {
            Success = response.Success,
            Result = response.Result,
            ErrorMessage = response.ErrorMessage
        });
        _serializedData = Serialize(new
        {
            Results = response.Results,
            ErrorMessages = response.ErrorMessages
        });
    }

    private MarkupString Serialize(object value)
    {
        var serialized =        JsonSerializer.Serialize(value, _serializerOptions)
        .Replace(" \"","&nbsp; &nbsp;\"")
        .Replace("\n","<br />");
        return new MarkupString(serialized);
    }
}