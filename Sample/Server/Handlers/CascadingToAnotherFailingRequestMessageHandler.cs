using Pipaslot.Mediator;
using Sample.Shared.Requests;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Sample.Server.Handlers
{
    public class CascadingToAnotherFailingRequestMessageHandler : IMessageHandler<CascadingToAnotherFailingRequestMessage>
    {
        private readonly IMediator _mediator;

        public CascadingToAnotherFailingRequestMessageHandler(IMediator mediator)
        {
            _mediator = mediator;
        }

        public async Task Handle(CascadingToAnotherFailingRequestMessage action, CancellationToken cancellationToken)
        {
            try
            {
                await _mediator.DispatchUnhandled(new FailingOnValidation.Request(), cancellationToken);
            }
            catch (MediatorExecutionException e)
            {
                //Here you can access data processed by nested mediator call and validation message generated by validation middleware
                //No direct exception is thrown because only error message was registered during processing, but we want to populate all error as final exception
                var _ = e.Response;
                throw;
            }
        }
    }
}
