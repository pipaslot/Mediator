using Demo.Shared.Playground;
using Pipaslot.Mediator;

namespace Demo.Server.Handlers.Playground;

public class CascadingToAnotherFailingRequestMessageHandler(IMediator mediator) : IMessageHandler<CascadingToAnotherFailingRequestMessage>
{
    public async Task Handle(CascadingToAnotherFailingRequestMessage action, CancellationToken cancellationToken)
    {
        try
        {
            await mediator.DispatchUnhandled(new FailingOnValidation.Request(), cancellationToken);
        }
        catch (MediatorExecutionException e)
        {
            //Here you can access data processed by nested mediator call and validation message generated by validation middleware
            //No direct exception is thrown because only error message was registered during processing, but we want to populate all error as final exception
            var _ = e.Response;
            throw;
        }
    }
}