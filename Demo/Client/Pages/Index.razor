@page "/"

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server. Watch your XHR network traffic.</p>

@if (_state == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _state.Forecast)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}
<p>@(_state?.Common?.Description ?? "Status message will be provided from server as well")</p>

@inject PersistentComponentState ApplicationState
@implements IDisposable

@code {
    private State? _state;
    private PersistingComponentStateSubscription _persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        if (ApplicationState.TryTakeFromJson<State>(
                nameof(_state), out var state))
        {
            _state = state;
        }
        else
        {
            var res = await Mediator.Execute(new WeatherForecast.Request());
            if (res.Success)
            {
                var common = (CommonResult?)res.Results.FirstOrDefault(r => r is CommonResult);
                _state = new(res.Result, common);
            }
        }

        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistState);
    }

    private Task PersistState()
    {
        ApplicationState.PersistAsJson(nameof(_state), _state);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => _persistingSubscription.Dispose();

    private record State(WeatherForecast.Result[] Forecast, CommonResult? Common);

}