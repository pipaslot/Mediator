@page "/"

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server. Watch your XHR network traffic.</p>

@if (_forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}
<p>@(_commonResult?.Description ?? "Status message will be provided from server as well")</p>

@code {
    private WeatherForecast.IResult[]? _forecasts;
    private CommonResult? _commonResult;
    //TODO: add state handling 

    protected override async Task OnInitializedAsync()
    {
        var result = await Mediator.Execute(new WeatherForecast.Request());

        if (result.Success)
        {
            _forecasts = result.Result;
        }

        _commonResult = (CommonResult?)result.Results.FirstOrDefault(r => r is CommonResult);
    }

}