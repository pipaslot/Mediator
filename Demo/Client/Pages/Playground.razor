@page "/playground"
@using System.Text.Json
@using Demo.Client.Models
@using Pipaslot.Mediator.Abstractions

<h1>Playground</h1>
<p>Test actions executed from client and their behaviour.</p>

<h5>Execute and Dispatch</h5>
<p>
    Requests:<br/>
    <button class="btn btn-primary btn-sm" @onclick="() => Execute(new WeatherForecast.Request())">Run Passing</button>
    <button class="btn btn-primary btn-sm" @onclick="() => Execute(new Failing.Request())">Run Failing</button>
    <button class="btn btn-primary btn-sm" @onclick="() => Mediator.ExecuteUnhandled(new Failing.Request())">Run Failing unhandled</button>
</p>
<p>
    Messages:<br/>
    <button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new DemoMessage(false))">Run Passing</button>
    <button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new DemoMessage(true))">Run Failing</button>
    <button class="btn btn-primary btn-sm" @onclick="() => Mediator.DispatchUnhandled(new Failing.Message())">Run Failing unhandled</button>
    <button class="btn btn-primary btn-sm" @onclick="() => Mediator.DispatchUnhandled(new ActionUnknownByBackend())">Run unknown action</button>
</p>
<p>
    Message with cascading calling of another failed message:<br/>
    <button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new CascadingToAnotherFailingRequestMessage())">Run Failing cascading message</button>
</p>

<h5>File download through HTTP GET</h5>
<p>
    <a class="btn btn-primary btn-sm" href="@_mediatorUrlFormatter.FormatHttpGet(new DemoDownload("DemoFile"))">Download without authentication</a>
</p>

<h5>UseReduceDuplicateProcessing middleware</h5>
<p>
    Reduce duplicate calls by middleware. Only one server request will be executed at the same time.<br/>
    <button class="btn btn-primary btn-sm" @onclick="RunDuplicateClassQuery">3x With class types</button>
    <button class="btn btn-primary btn-sm" @onclick="RunDuplicateRecordQuery">3x With record types</button>
</p>

<h5>Notifications from handlers or services</h5>
<p>
    <button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new MessageWithNotification(false))">Run Passing</button>
    <button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new MessageWithNotification(true))">Run Failing</button>
    <button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new CallingNestedNotificationMessage())">Nested handler notification</button>
</p>
<h5>Protecting actions to be directly called from HTTP</h5>
<button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new CalingCustomInternalRequestMessage())">Indirect call (passing)</button>
<button class="btn btn-primary btn-sm" @onclick="() => Dispatch(new CustomInternalRequest())">Direct call (failing)</button>

<h5>Long running actions</h5>
<button class="btn btn-primary btn-sm" @onclick="() => Execute(new LongRunningRequest(10))">Start</button>
<p>You can got to another page ant the request will be cancelled. Thas is achieved by @nameof(CancellationOnNavigationMediatorMiddleware)</p>

<h4>Result Data</h4>
<code>
    @if (!string.IsNullOrWhiteSpace(_serializedReponse.Value))
    {
        <div>@_serializedReponse</div>
    }
    else
    {
        <div>Execute any action</div>
    }
</code>

@inject Pipaslot.Mediator.Http.IMediatorUrlFormatter _mediatorUrlFormatter

@code {
    private MarkupString _serializedReponse;

    private readonly JsonSerializerOptions _serializerOptions = new()
    {
        WriteIndented = true
    };

    private async Task Dispatch(IMediatorAction action)
    {
        _serializedReponse = new MarkupString("");
        var result = await Mediator.Dispatch(action);
        _serializedReponse = Serialize(result.Results);
    }

    private async Task Execute<TResult>(IMediatorAction<TResult> action)
    {
        _serializedReponse = new MarkupString("");
        var result = await Mediator.Execute(action);
        _serializedReponse = Serialize(result.Results);
    }

    private async Task RunDuplicateClassQuery()
    {
        var date = DateTime.Now;
        var task1 = Mediator.Execute(new WeatherForecast.Request { Date = date });
        var task2 = Mediator.Execute(new WeatherForecast.Request { Date = date });
        var task3 = Mediator.Execute(new WeatherForecast.Request { Date = date });
        await Task.WhenAll(task1, task2, task3);
        _serializedReponse = Serialize(task1.Result);
    }

    private async Task RunDuplicateRecordQuery()
    {
        var date = DateTime.Now;
        var task1 = Mediator.Execute(new WeatherForecast.RequestRecord { Date = date });
        var task2 = Mediator.Execute(new WeatherForecast.RequestRecord { Date = date });
        var task3 = Mediator.Execute(new WeatherForecast.RequestRecord { Date = date });
        await Task.WhenAll(task1, task2, task3);
        _serializedReponse = Serialize(task1.Result);
    }

    private MarkupString Serialize(object value)
    {
        var serialized = JsonSerializer.Serialize(value, _serializerOptions)
            .Replace(" \"", "&nbsp; &nbsp;\"")
            .Replace("\n", "<br />");
        return new MarkupString(serialized);
    }

}