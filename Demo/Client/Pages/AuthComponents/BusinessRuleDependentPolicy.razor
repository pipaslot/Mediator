@using Demo.Shared.Auth;
@using Pipaslot.Mediator.Authorization;
<h3>Custom policies</h3>
<p>You can use the policies to consider object state. For example for disabling execution in case if invalida model state.</p>

<EditForm Model="@_model" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>
            <InputCheckbox Value="@_model.IsAvailable"
                           ValueExpression="()=>_model.IsAvailable"
                           ValueChanged="e=>OnIsAvailableChanged(e)" /> Is action available
        </label>
        <label>
            <InputCheckbox Value="@_model.IsInvalid"
                           ValueExpression="()=>_model.IsInvalid"
                           ValueChanged="e=>OnIsInvalidChanged(e)" /> Make the model invalid
        </label>
    </div>
    <div class="mt-2">
        @if (_auth.IsAvailable)
        {
            <button class="btn btn-primary btn-sm" type="submit" disabled="@_auth.IsDisabled" title="@_auth.Reason">
                <span class="me-1">Submit</span>
            </button>
        }
        <div><i>Reason:</i></div>
        <div>@_auth.Reason</div>
    </div>
</EditForm>

@code {
    private CustomPolicyMessage _model = new();

    private AuthorizeRequestResponse _auth = new();
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await OnChange();
    }

    private async Task OnIsInvalidChanged(bool value)
    {
        _model.IsInvalid = value;
        await OnChange();
    }

    private async Task OnIsAvailableChanged(bool value)
    {
        _model.IsAvailable = value;
        await OnChange();
    }

    private async Task OnChange()
    {
        _auth = await Mediator.Authorize(_model);
    }

    private async Task Submit()
    {
        var result = await Mediator.Dispatch(_model);
        if (result.Success)
        {
            _auth.Reason = "Validation passed";
        }
    }
}
