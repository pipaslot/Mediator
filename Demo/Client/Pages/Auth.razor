@page "/auth"
@using Demo.Shared.Auth
@using Pipaslot.Mediator.Notifications
@inject AuthService AuthService
@inject INotificationProvider Notifications

<AuthorizeView>
    <NotAuthorized>
        <button class="btn btn-primary btn-sm" @onclick="Login">Login</button>
    </NotAuthorized>
    <Authorized>
        <button class="btn btn-primary btn-sm" @onclick="Logout">Logout</button> Your role is: visitor
    </Authorized>
</AuthorizeView>
<hr />

<h5>Action with conditional authorization</h5>

<EditForm Model="@_model" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>
            <InputCheckbox Value="@_model.RequireAuthentication" ValueExpression="()=>_model.RequireAuthentication" ValueChanged="e=>OnRequireAuthenticationChanged(e)"/> Require authenticated user
        </label>
    </div>
    <div>
        <label>
            Required role name:
            <InputText Value="@_model.RequiredRole" ValueExpression="()=>_model.RequiredRole" ValueChanged="e=>OnRequiredRoleChanged(e)"/>
        </label>
    </div>
    <div>
        <button class="btn btn-primary btn-sm me-1" type="submit">Submit</button> 
        @if (_isAuthorized)
        {
            <span>Allowed</span>
        }
        else
        {
            <span>Denied</span>
        }
    </div>
</EditForm>


@code {
    private ConditionalAuthenticationMessage _model = new();
    private bool _isAuthorized;
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await OnChange();
    }
    private async Task Login()
    {
        await AuthService.SignIn("Demo", "haha");
        await Task.Delay(100);
        await OnChange();
    }
    private async Task Logout()
    {
        await AuthService.SignOut();
        await OnChange();
    }
    private async Task OnRequireAuthenticationChanged(bool value)
    {
        _model.RequireAuthentication = value;
        await OnChange();
    }
    private async Task OnRequiredRoleChanged(string value)
    {
        _model.RequiredRole = value;
        await OnChange();
    }
    private async Task OnChange()
    {
        _isAuthorized = await Mediator.IsAuthorized(_model);
    }

    private async Task Submit()
    {
        var result = await Mediator.Dispatch(_model);
        if (result.Success)
        {
            Notifications.AddSuccess("Validation passed");
        }
    }

}
