<div class="toast-container position-fixed top-0 end-0" style="z-index: 11">
    @foreach (var message in _notifications)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header @GetTypeClass(message) row mx-0">
                <div class="row px-0">
                    <small class="col text-white">@message.Time</small>
                    <button type="button" class="btn-close" @onclick="() => { _notifications.Remove(message); }"></button>
                </div>
                <strong class="text-white px-0">@message.Source</strong>
            </div>
            <div class="toast-body">
                @message.Content
            </div>
        </div>
    }
</div>

@inject INotificationReceiver NotificationMiddleware
@using Pipaslot.Mediator.Notifications
@implements IDisposable

@code {
    private readonly List<Notification> _notifications = new();

    /// <summary>
    /// Define durations for notification types in miliseconds
    /// </summary>
    public Dictionary<NotificationType, double> Durations = new()
    {
        { NotificationType.Information, 4000 },
        { NotificationType.Error, 5000 },
        { NotificationType.Warning, 4000 },
        { NotificationType.Success, 3000 }
    };

    protected override void OnInitialized()
    {
        NotificationMiddleware.NotificationReceived += OnNotificationReceived;
    }

    public void Dispose()
    {
        NotificationMiddleware.NotificationReceived -= OnNotificationReceived;
    }

    private void OnNotificationReceived(object? sender, NotificationReceivedEventArgs args)
    {
        foreach (var notification in args.Notifications)
        {
            _notifications.Add(notification);
            var timer = GetTimer(notification.Type);
            if (timer != null)
            {
                timer.Elapsed += (sender, args) =>
                {
                    _notifications.Remove(notification);
                    timer.Dispose();
                    StateHasChanged();
                };
                timer.AutoReset = false;
                timer.Start();
            }
        }

        StateHasChanged();
    }

    private System.Timers.Timer? GetTimer(NotificationType type)
    {
        if (Durations.TryGetValue(type, out var timeout) && timeout > 0)
        {
            return new System.Timers.Timer(timeout);
        }

        return null;
    }

    private string GetTypeClass(Notification notification)
    {
        switch (notification.Type)
        {
            case NotificationType.Success:
                return "bg-success";
            case NotificationType.Information:
                return "bg-info";
            case NotificationType.Warning:
                return "bg-warning";
            default:
                return "bg-danger";
        }
    }

}